plugins {
    id 'java'
    id 'maven-publish'
}

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable ignored) {
        return "unknown"
    }
}

String semver = "${version_major}.${version_minor}.${version_patch}"

String build_number = System.getenv("PROMOTED_NUMBER")
if (build_number == null)
    build_number = System.getenv("BUILD_NUMBER")
if (build_number == null)
    build_number = getGitRef()

version = "${semver}+${build_number}"
group = 'li.cil.sedna'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}


import org.apache.tools.ant.taskdefs.condition.Os

task compileBuildroot(type: Exec) {
    if (Os.isFamily(Os.FAMILY_UNIX)) {
        commandLine "make"
    } else {
        logger.log(LogLevel.WARN, "Can only make buildroot on Linux. Expecting output files to have been manually placed in [output/images/].")
        enabled = false
    }
    outputs.files "output/images/fw_jump.bin", "output/images/Image", "output/images/rootfs.ext2"
    outputs.upToDateWhen { false }
}

task copyBuildrootImages(type: Copy) {
    from compileBuildroot.outputs.files
    into "src/main/resources/generated/"
}

copyBuildrootImages.dependsOn(compileBuildroot)
compileJava.dependsOn(copyBuildrootImages)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url System.getenv("MAVEN_PATH")
        }
    }
}
